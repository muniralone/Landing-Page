{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nconst _c0 = [\"*\"];\n\nclass CdTimerComponent {\n  constructor(elt, renderer) {\n    this.elt = elt;\n    this.renderer = renderer;\n    this.onStart = new EventEmitter();\n    this.onStop = new EventEmitter();\n    this.onTick = new EventEmitter();\n    this.onComplete = new EventEmitter(); // Initialization\n\n    this.autoStart = true;\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeoutId = null;\n    this.countdown = false;\n    this.format = 'default';\n  }\n\n  ngAfterViewInit() {\n    const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n\n    this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n\n    if (this.autoStart === undefined || this.autoStart === true) {\n      this.start();\n    }\n  }\n\n  ngOnDestroy() {\n    this.resetTimeout();\n  }\n  /**\n   * Start the timer\n   */\n\n\n  start() {\n    this.initVar();\n    this.resetTimeout();\n    this.computeTimeUnits();\n    this.startTickCount();\n    this.onStart.emit(this);\n  }\n  /**\n   * Resume the timer\n   */\n\n\n  resume() {\n    this.resetTimeout();\n    this.startTickCount();\n  }\n  /**\n   * Stop the timer\n   */\n\n\n  stop() {\n    this.clear();\n    this.onStop.emit(this);\n  }\n  /**\n   * Reset the timer\n   */\n\n\n  reset() {\n    this.initVar();\n    this.resetTimeout();\n    this.clear();\n    this.computeTimeUnits();\n    this.renderText();\n  }\n  /**\n   * Get the time information\n   * @returns TimeInterface\n   */\n\n\n  get() {\n    return {\n      seconds: this.seconds,\n      minutes: this.minutes,\n      hours: this.hours,\n      days: this.days,\n      timer: this.timeoutId,\n      tick_count: this.tickCounter\n    };\n  }\n  /**\n   * Initialize variable before start\n   */\n\n\n  initVar() {\n    this.startTime = this.startTime || 0;\n    this.endTime = this.endTime || 0;\n    this.countdown = this.countdown || false;\n    this.tickCounter = this.startTime; // Disable countdown if start time not defined\n\n    if (this.countdown && this.startTime === 0) {\n      this.countdown = false;\n    } // Determine auto format\n\n\n    if (!this.format) {\n      this.format = this.ngContentSchema.length > 5 ? 'user' : 'default';\n    }\n  }\n  /**\n   * Reset timeout\n   */\n\n\n  resetTimeout() {\n    if (this.timeoutId) {\n      clearInterval(this.timeoutId);\n    }\n  }\n  /**\n   * Render the time to DOM\n   */\n\n\n  renderText() {\n    let outputText;\n\n    if (this.format === 'user') {\n      // User presentation\n      const items = {\n        'seconds': this.seconds,\n        'minutes': this.minutes,\n        'hours': this.hours,\n        'days': this.days\n      };\n      outputText = this.ngContentSchema;\n\n      for (const key of Object.keys(items)) {\n        outputText = outputText.replace('[' + key + ']', items[key].toString());\n      }\n    } else if (this.format === 'intelli') {\n      // Intelli presentation\n      outputText = '';\n\n      if (this.days > 0) {\n        outputText += this.days.toString() + 'day' + (this.days > 1 ? 's' : '') + ' ';\n      }\n\n      if (this.hours > 0 || this.days > 0) {\n        outputText += this.hours.toString() + 'h ';\n      }\n\n      if ((this.minutes > 0 || this.hours > 0) && this.days === 0) {\n        outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n      }\n\n      if (this.hours === 0 && this.days === 0) {\n        outputText += this.seconds.toString().padStart(2, '0') + 's';\n      }\n    } else if (this.format === 'hms') {\n      // Hms presentation\n      outputText = this.hours.toString().padStart(2, '0') + ':';\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else if (this.format === 'ms') {\n      // ms presentation\n      outputText = '';\n\n      if (this.hours > 0) {\n        outputText = this.hours.toString().padStart(2, '0') + ':';\n      }\n\n      outputText += this.minutes.toString().padStart(2, '0') + ':';\n      outputText += this.seconds.toString().padStart(2, '0');\n    } else {\n      // Default presentation\n      outputText = this.days.toString() + 'd ';\n      outputText += this.hours.toString() + 'h ';\n      outputText += this.minutes.toString() + 'm ';\n      outputText += this.seconds.toString() + 's';\n    }\n\n    this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n  }\n\n  clear() {\n    this.resetTimeout();\n    this.timeoutId = null;\n  }\n  /**\n   * Compute each unit (seconds, minutes, hours, days) for further manipulation\n   * @protected\n   */\n\n\n  computeTimeUnits() {\n    if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60 % 60);\n      this.hours = Math.floor(this.tickCounter / 3600 % 24);\n      this.days = Math.floor(this.tickCounter / 3600 / 24);\n    } else if (this.maxTimeUnit === 'second') {\n      this.seconds = this.tickCounter;\n      this.minutes = 0;\n      this.hours = 0;\n      this.days = 0;\n    } else if (this.maxTimeUnit === 'minute') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60);\n      this.hours = 0;\n      this.days = 0;\n    } else if (this.maxTimeUnit === 'hour') {\n      this.seconds = Math.floor(this.tickCounter % 60);\n      this.minutes = Math.floor(this.tickCounter / 60 % 60);\n      this.hours = Math.floor(this.tickCounter / 3600);\n      this.days = 0;\n    }\n\n    this.renderText();\n  }\n  /**\n   * Start tick count, base of this component\n   * @protected\n   */\n\n\n  startTickCount() {\n    const that = this;\n    that.timeoutId = setInterval(function () {\n      let counter;\n\n      if (that.countdown) {\n        // Compute finish counter for countdown\n        counter = that.tickCounter;\n\n        if (that.startTime > that.endTime) {\n          counter = that.tickCounter - that.endTime - 1;\n        }\n      } else {\n        // Compute finish counter for timer\n        counter = that.tickCounter - that.startTime;\n\n        if (that.endTime > that.startTime) {\n          counter = that.endTime - that.tickCounter - 1;\n        }\n      }\n\n      that.computeTimeUnits();\n      const timer = {\n        seconds: that.seconds,\n        minutes: that.minutes,\n        hours: that.hours,\n        days: that.days,\n        timer: that.timeoutId,\n        tick_count: that.tickCounter\n      };\n      that.onTick.emit(timer);\n\n      if (counter < 0) {\n        that.stop();\n        that.onComplete.emit(that);\n        return;\n      }\n\n      if (that.countdown) {\n        that.tickCounter--;\n      } else {\n        that.tickCounter++;\n      }\n    }, 1000); // Each seconds\n  }\n\n}\n\nCdTimerComponent.ɵfac = function CdTimerComponent_Factory(t) {\n  return new (t || CdTimerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nCdTimerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CdTimerComponent,\n  selectors: [[\"cd-timer\"]],\n  inputs: {\n    startTime: \"startTime\",\n    endTime: \"endTime\",\n    countdown: \"countdown\",\n    autoStart: \"autoStart\",\n    maxTimeUnit: \"maxTimeUnit\",\n    format: \"format\"\n  },\n  outputs: {\n    onStart: \"onStart\",\n    onStop: \"onStop\",\n    onTick: \"onTick\",\n    onComplete: \"onComplete\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CdTimerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdTimerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cd-timer',\n      template: ' <ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    startTime: [{\n      type: Input\n    }],\n    endTime: [{\n      type: Input\n    }],\n    countdown: [{\n      type: Input\n    }],\n    autoStart: [{\n      type: Input\n    }],\n    maxTimeUnit: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    onStart: [{\n      type: Output\n    }],\n    onStop: [{\n      type: Output\n    }],\n    onTick: [{\n      type: Output\n    }],\n    onComplete: [{\n      type: Output\n    }]\n  });\n})();\n\nclass CdTimerModule {}\n\nCdTimerModule.ɵfac = function CdTimerModule_Factory(t) {\n  return new (t || CdTimerModule)();\n};\n\nCdTimerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdTimerModule\n});\nCdTimerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdTimerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdTimerComponent],\n      imports: [],\n      exports: [CdTimerComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdTimerComponent, CdTimerModule };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","NgModule","CdTimerComponent","constructor","elt","renderer","onStart","onStop","onTick","onComplete","autoStart","startTime","endTime","timeoutId","countdown","format","ngAfterViewInit","ngContentNode","nativeElement","lastChild","ngContentSchema","nodeValue","undefined","start","ngOnDestroy","resetTimeout","initVar","computeTimeUnits","startTickCount","emit","resume","stop","clear","reset","renderText","get","seconds","minutes","hours","days","timer","tick_count","tickCounter","length","clearInterval","outputText","items","key","Object","keys","replace","toString","padStart","setProperty","maxTimeUnit","Math","floor","that","setInterval","counter","ɵfac","ElementRef","Renderer2","ɵcmp","type","args","selector","template","CdTimerModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["D:/angularsite/node_modules/angular-cd-timer/fesm2020/angular-cd-timer.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\n\nclass CdTimerComponent {\n    constructor(elt, renderer) {\n        this.elt = elt;\n        this.renderer = renderer;\n        this.onStart = new EventEmitter();\n        this.onStop = new EventEmitter();\n        this.onTick = new EventEmitter();\n        this.onComplete = new EventEmitter();\n        // Initialization\n        this.autoStart = true;\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeoutId = null;\n        this.countdown = false;\n        this.format = 'default';\n    }\n    ngAfterViewInit() {\n        const ngContentNode = this.elt.nativeElement.lastChild; // Get last child, defined by user or span\n        this.ngContentSchema = ngContentNode ? ngContentNode.nodeValue : '';\n        if (this.autoStart === undefined || this.autoStart === true) {\n            this.start();\n        }\n    }\n    ngOnDestroy() {\n        this.resetTimeout();\n    }\n    /**\n     * Start the timer\n     */\n    start() {\n        this.initVar();\n        this.resetTimeout();\n        this.computeTimeUnits();\n        this.startTickCount();\n        this.onStart.emit(this);\n    }\n    /**\n     * Resume the timer\n     */\n    resume() {\n        this.resetTimeout();\n        this.startTickCount();\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n        this.clear();\n        this.onStop.emit(this);\n    }\n    /**\n     * Reset the timer\n     */\n    reset() {\n        this.initVar();\n        this.resetTimeout();\n        this.clear();\n        this.computeTimeUnits();\n        this.renderText();\n    }\n    /**\n     * Get the time information\n     * @returns TimeInterface\n     */\n    get() {\n        return {\n            seconds: this.seconds,\n            minutes: this.minutes,\n            hours: this.hours,\n            days: this.days,\n            timer: this.timeoutId,\n            tick_count: this.tickCounter\n        };\n    }\n    /**\n     * Initialize variable before start\n     */\n    initVar() {\n        this.startTime = this.startTime || 0;\n        this.endTime = this.endTime || 0;\n        this.countdown = this.countdown || false;\n        this.tickCounter = this.startTime;\n        // Disable countdown if start time not defined\n        if (this.countdown && this.startTime === 0) {\n            this.countdown = false;\n        }\n        // Determine auto format\n        if (!this.format) {\n            this.format = (this.ngContentSchema.length > 5) ? 'user' : 'default';\n        }\n    }\n    /**\n     * Reset timeout\n     */\n    resetTimeout() {\n        if (this.timeoutId) {\n            clearInterval(this.timeoutId);\n        }\n    }\n    /**\n     * Render the time to DOM\n     */\n    renderText() {\n        let outputText;\n        if (this.format === 'user') {\n            // User presentation\n            const items = {\n                'seconds': this.seconds,\n                'minutes': this.minutes,\n                'hours': this.hours,\n                'days': this.days\n            };\n            outputText = this.ngContentSchema;\n            for (const key of Object.keys(items)) {\n                outputText = outputText.replace('[' + key + ']', items[key].toString());\n            }\n        }\n        else if (this.format === 'intelli') {\n            // Intelli presentation\n            outputText = '';\n            if (this.days > 0) {\n                outputText += this.days.toString() + 'day' + ((this.days > 1) ? 's' : '') + ' ';\n            }\n            if ((this.hours > 0) || (this.days > 0)) {\n                outputText += this.hours.toString() + 'h ';\n            }\n            if (((this.minutes > 0) || (this.hours > 0)) && (this.days === 0)) {\n                outputText += this.minutes.toString().padStart(2, '0') + 'min ';\n            }\n            if ((this.hours === 0) && (this.days === 0)) {\n                outputText += this.seconds.toString().padStart(2, '0') + 's';\n            }\n        }\n        else if (this.format === 'hms') {\n            // Hms presentation\n            outputText = this.hours.toString().padStart(2, '0') + ':';\n            outputText += this.minutes.toString().padStart(2, '0') + ':';\n            outputText += this.seconds.toString().padStart(2, '0');\n        }\n        else if (this.format === 'ms') {\n            // ms presentation\n            outputText = '';\n            if (this.hours > 0) {\n                outputText = this.hours.toString().padStart(2, '0') + ':';\n            }\n            outputText += this.minutes.toString().padStart(2, '0') + ':';\n            outputText += this.seconds.toString().padStart(2, '0');\n        }\n        else {\n            // Default presentation\n            outputText = this.days.toString() + 'd ';\n            outputText += this.hours.toString() + 'h ';\n            outputText += this.minutes.toString() + 'm ';\n            outputText += this.seconds.toString() + 's';\n        }\n        this.renderer.setProperty(this.elt.nativeElement, 'innerHTML', outputText);\n    }\n    clear() {\n        this.resetTimeout();\n        this.timeoutId = null;\n    }\n    /**\n     * Compute each unit (seconds, minutes, hours, days) for further manipulation\n     * @protected\n     */\n    computeTimeUnits() {\n        if (!this.maxTimeUnit || this.maxTimeUnit === 'day') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor((this.tickCounter / 60) % 60);\n            this.hours = Math.floor((this.tickCounter / 3600) % 24);\n            this.days = Math.floor((this.tickCounter / 3600) / 24);\n        }\n        else if (this.maxTimeUnit === 'second') {\n            this.seconds = this.tickCounter;\n            this.minutes = 0;\n            this.hours = 0;\n            this.days = 0;\n        }\n        else if (this.maxTimeUnit === 'minute') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor(this.tickCounter / 60);\n            this.hours = 0;\n            this.days = 0;\n        }\n        else if (this.maxTimeUnit === 'hour') {\n            this.seconds = Math.floor(this.tickCounter % 60);\n            this.minutes = Math.floor((this.tickCounter / 60) % 60);\n            this.hours = Math.floor(this.tickCounter / 3600);\n            this.days = 0;\n        }\n        this.renderText();\n    }\n    /**\n     * Start tick count, base of this component\n     * @protected\n     */\n    startTickCount() {\n        const that = this;\n        that.timeoutId = setInterval(function () {\n            let counter;\n            if (that.countdown) {\n                // Compute finish counter for countdown\n                counter = that.tickCounter;\n                if (that.startTime > that.endTime) {\n                    counter = that.tickCounter - that.endTime - 1;\n                }\n            }\n            else {\n                // Compute finish counter for timer\n                counter = that.tickCounter - that.startTime;\n                if (that.endTime > that.startTime) {\n                    counter = that.endTime - that.tickCounter - 1;\n                }\n            }\n            that.computeTimeUnits();\n            const timer = {\n                seconds: that.seconds,\n                minutes: that.minutes,\n                hours: that.hours,\n                days: that.days,\n                timer: that.timeoutId,\n                tick_count: that.tickCounter\n            };\n            that.onTick.emit(timer);\n            if (counter < 0) {\n                that.stop();\n                that.onComplete.emit(that);\n                return;\n            }\n            if (that.countdown) {\n                that.tickCounter--;\n            }\n            else {\n                that.tickCounter++;\n            }\n        }, 1000); // Each seconds\n    }\n}\nCdTimerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nCdTimerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.3\", type: CdTimerComponent, selector: \"cd-timer\", inputs: { startTime: \"startTime\", endTime: \"endTime\", countdown: \"countdown\", autoStart: \"autoStart\", maxTimeUnit: \"maxTimeUnit\", format: \"format\" }, outputs: { onStart: \"onStart\", onStop: \"onStop\", onTick: \"onTick\", onComplete: \"onComplete\" }, ngImport: i0, template: ' <ng-content></ng-content>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cd-timer',\n                    template: ' <ng-content></ng-content>'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { startTime: [{\n                type: Input\n            }], endTime: [{\n                type: Input\n            }], countdown: [{\n                type: Input\n            }], autoStart: [{\n                type: Input\n            }], maxTimeUnit: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], onStart: [{\n                type: Output\n            }], onStop: [{\n                type: Output\n            }], onTick: [{\n                type: Output\n            }], onComplete: [{\n                type: Output\n            }] } });\n\nclass CdTimerModule {\n}\nCdTimerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdTimerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, declarations: [CdTimerComponent], exports: [CdTimerComponent] });\nCdTimerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.3\", ngImport: i0, type: CdTimerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdTimerComponent],\n                    imports: [],\n                    exports: [CdTimerComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of angular-cd-timer\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdTimerComponent, CdTimerModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}